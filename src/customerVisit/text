import {
  View,
  Text,
  Alert,
  Button,
  TextInput,
  FlatList,
  StyleSheet,
} from 'react-native';
import React, {Component} from 'react';
import MapView, {PROVIDER_GOOGLE, Marker, Callout} from 'react-native-maps';
import Geolocation from 'react-native-geolocation-service';
import {GooglePlacesAutocomplete} from 'react-native-google-places-autocomplete';
import firestore from '@react-native-firebase/firestore';
import {connect} from 'react-redux';

class NearByCustomers extends Component {


  constructor(props:any) {
    console.log('data nrfidagirngi');
    
    super(props);
    console.log(props);
    
    this.state = {
      currentLocation: {
        lat: 0,
        lng: 0,
      },
      searchedLocation: {
        lat: 0,
        lng: 0,
      },
      nearByPlaces:[],

    };
  }

  

  componentDidMount() {
    Geolocation.getCurrentPosition(
      position => {
        this.setState({
          currentLocation: {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          },
        });
      },
      error => {
        Alert.alert(error.message.toString());
      },
      {
        showLocationDialog: true,
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 0,
      },
    );
    this.fetchNearestPlacesFromGoogle();
  }

  componentDidUpdate(
    prevProps: Readonly<{}>,
    prevState: Readonly<{}>,
    snapshot?: any,
  ): void {
    if (prevState.searchedLocation.lat !== this.state.searchedLocation.lat) {
      this.fetchNearestPlacesFromGoogle();
    }
  }

  fetchNearestPlacesFromGoogle = async () => {
    let radMetter = 10000; // Search withing 2 KM radius
    const url =
      'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=' +
      this.state.searchedLocation.lat + //17.5065026
      ',' +
      this.state.searchedLocation.lng + //78.4212898
      '&radius=50' +
      '&type=shop' +
      '&key=' +
      'AIzaSyBT4eIW5KQoalNqar5cfPpAfnvpcpwLBGM';

    // https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=17.5065026,78.4212898&radius=2000&type=shop&key=AIzaSyBT4eIW5KQoalNqar5cfPpAfnvpcpwLBGM

    fetch(url)
      .then(res => {
        return res.json();
      })
      .then(async res => {
        var places: {}[] = []; // This Array WIll contain locations received from google
        for (let googlePlace of res.results) {
          var place = {};
          var lat = googlePlace.geometry.location.lat;
          var lng = googlePlace.geometry.location.lng;
          var coordinate = {
            latitude: lat,
            longitude: lng,
          };

          var gallery:[] = [];

          //   if (googlePlace.photos) {
          //    for(let photo of googlePlace.photos) {
          //      var photoUrl = Urls.GooglePicBaseUrl + photo.photo_reference;
          //      gallery.push(photoUrl);
          //   }
          // }

          place['placeTypes'] = googlePlace.types;
          place['coordinates'] = coordinate;
          place['placeId'] = googlePlace.place_id;
          place['placeName'] = googlePlace.name;
          place['gallery'] = gallery;

          places.push(place);
          // console.log('=====placesss===============================');
          // console.log(place);
          // console.log('====================================');
        }

        const collection = await firestore()
          .collection('CustomerDetails')
          .doc(this.props.data.user.uid)
          .collection('Customer')
          .get();

        const customer: any[] | PromiseLike<any[]> = [];

        collection.forEach((doc: {data: () => any}) => {
          customer.push(doc.data());
        });

        const nearByCustomer: any[] | PromiseLike<any[]> = [];

         customer.forEach((customerPlaceId: any) => {
          places.forEach((placePlaceId: any) => {
            if (customerPlaceId.placeId == placePlaceId.placeId) {
              // console.log(
              //   '================nearby==========================================================',
              // );
              // console.log(customerPlaceId.placeId);
              // console.log(placePlaceId.placeId);
              // console.log('====================================');
              const nearByPlaceData = {
                place: customerPlaceId,
                match: 'true',
              };
         
              nearByCustomer.push(nearByPlaceData);
            }
             else  {
               console.log(
                 '================nearby=====nearrbyyyy=====================================================',
               );
               console.log(customerPlaceId.placeId);
               console.log(placePlaceId.placeId);
               console.log('====================================');
              const nearByPlaceData = {
                place: placePlaceId,
                match: 'false',
              };
              // console.log('================nearby=nearby===================');
              // console.log(nearByPlaceData);
              // console.log('====================================');
              nearByCustomer.push(nearByPlaceData);
            }
          });
        });

        this.setState({nearByPlaces: {nearByCustomer}});
        // console.log('=============match=======================');
        // console.log(this.state.nearByPlaces);
        // console.log('====================================');
      })
      .catch(error => {
        console.log(error);
      });
    //ChIJDbXygM-RyzsRX8zhe3N83dQ
    //  LOG  ChIJDbXygM-RyzsRX8zhe3N83dQ
  };

  render() {
    return (
      <View style={{flex: 1}}>
        <View>
          <Button
            title="near By List"
            onPress={() => {
              this.props.navigation.navigate('nearByCustomersList', {
                item: this.state.nearByPlaces.nearByCustomer,
              });
            }}></Button>
          <GooglePlacesAutocomplete
            placeholder="Search"
            fetchDetails={true}
            onPress={(data, details = null) => {
              this.setState({
                searchedLocation: {
                  lat: details?.geometry?.location.lat,
                  lng: details?.geometry?.location.lng,
                },
              });
            }}
            query={{
              key: 'AIzaSyBT4eIW5KQoalNqar5cfPpAfnvpcpwLBGM',
              language: 'en',
            }}
            styles={styles}
          />
        </View>
        <View style={{flex: 1, width: '100%'}}>
          <MapView
            provider={PROVIDER_GOOGLE}
            style={{flex: 1, marginBottom: -60}}
            region={{
              latitude: this.state.searchedLocation.lat
                ? this.state.searchedLocation.lat
                : this.state.currentLocation.lat,
              longitude: this.state.searchedLocation.lng
                ? this.state.searchedLocation.lng
                : this.state.currentLocation.lng,
              latitudeDelta: 0.0922,
              longitudeDelta: 0.0421,
            }}
            // fullscreenControl={false}
            getMarkersFrames={false}>
            <Marker
              coordinate={{
                latitude: this.state.currentLocation.lat,
                longitude: this.state.currentLocation.lng,
              }}
              title={'My Location'}
              description={'Its your location'}
              onPress={() => Alert.alert('this is alert')}></Marker>
            <Marker
              coordinate={{
                latitude: this.state.searchedLocation.lat,
                longitude: this.state.searchedLocation.lng,
              }}
              title={'Searched Location'}
              description={'location that you searched for'}></Marker>
            {this.state.nearByPlaces.nearByCustomer
              ? this.state.nearByPlaces.nearByCustomer.map((marker, index) => (
                      
                    <Marker
                      key={index}
                      coordinate={{
                        latitude: marker?.place?.coordinates?.latitude,
                        longitude: marker?.place?.coordinates?.longitude,
                      }}
                      pinColor={marker.match =='true'? 'green' : 'red'}
                      title={marker?.match}
                      onPress={() => {{console.log(marker?.place?.placeId)};
                      }}></Marker>
                     
                ))
              : null}
          </MapView>
        </View>

      </View>
    );
  }
}

const styles = StyleSheet.create({
  textInputContainer: {
    backgroundColor: 'rgba(0,0,0,0)',
    borderTopWidth: 0,
    borderBottomWidth: 0,
    zIndex: 999,
    width: '80%',
    marginLeft: '10%',
    marginTop: 5,
  },
  textInput: {
    marginLeft: 0,
    marginRight: 0,
    height: 45,
    color: '#5d5d5d',
    fontSize: 16,
    borderWidth: 1,
    zIndex: 999,
  },
  predefinedPlacesDescription: {
    color: '#1faadb',
  },
  listView: {
    top: 45.5,
    zIndex: 10,
    position: 'absolute',
    color: 'black',
    backgroundColor: 'white',
    width: '80%',
    marginLeft: '9%',
  },
  separator: {
    flex: 1,
    height: StyleSheet.hairlineWidth,
    backgroundColor: 'lightblue',
  },
  description: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    fontSize: 14,
    maxWidth: '80%',
  },
});

const mapStateToProps = (state: any) => {
  return {
    data: state.data,
    loginSuccess: state.loginSuccess,
    loginFail: state.loginFail,
    isLogin: state.isLogin,
    Customer: state.Customer,
    Trip: state.Trip,
    TripCustomer: state.TripCustomer,
    allCustomer: state.allCustomer,
  };
};

export default connect(mapStateToProps)(NearByCustomers);


